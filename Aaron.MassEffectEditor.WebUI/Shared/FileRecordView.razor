@using Aaron.MassEffectEditor.Coalesced.Records
@inject MassEffectData _massEffectDataService


@if (_massEffectDataService.CurrentContainer != null)
{
    @foreach (SectionRecord sectionRecord in _massEffectDataService.CurrentFileRecord)
    {
        <div class="card text-white bg-dark my-2">
            <div class="card-header">
                @sectionRecord.Name
            </div>
            <div class="card-body">
                <form>
                    @foreach (EntryRecord entryRecord in sectionRecord)
                    {
                        <fieldset>
                            <legend>@entryRecord.Name - @entryRecord.Count</legend>

                            @{ int valueIndex = 0; }
                            @foreach (string value in entryRecord)
                            {
                                string valueId = $"{sectionRecord.Name}-{entryRecord.Name}-{valueIndex}";

                                int actualValueIndex = valueIndex;// Note this is to work around c# lambda hoisting weirdness
                                <div class="form-group">
                                    <label for="@valueId" class="invisible">Entry @(valueIndex)</label>
                                    
                                    <input @onchange="(e) => UpdateItem(entryRecord, actualValueIndex, e.Value)" type="text" class="form-control form-control-sm" id="@valueId" placeholder="Enter email" value="@value">
                                </div>

                                valueIndex++;
                            }

                        </fieldset>
                    }
                </form>
            </div>
        </div>
    }
}
@code {

    protected override void OnInitialized()
    {
        _massEffectDataService.OnCurrentFileRecordChanged += ForceUpdate;
    }

    private void ForceUpdate(FileRecord record)
    {
        StateHasChanged();
    }

    private void UpdateItem(EntryRecord entry, int valueIndex, object value)
    {
        Console.WriteLine($"{entry.Name}[{valueIndex}] = {value}");

        entry[valueIndex] = value.ToString();
    }


}
